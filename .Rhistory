x_range <- linspace(min(steps), max(steps), n = 1000)
# Generate the empirical cdf
empirical <- c()
for (i in 1:length(steps)) {
empirical <- c(empirical, length(steps[steps > steps[i]]) / length(steps))
}
empirical_data <- tibble(x = steps, y = empirical)
# Generate the continuous functions
plot_data <- tibble(x_range = x_range, trunc_pareto = ptruncpareto(x_range, xmin, xmax, alpha_truncated, lower.tail = F), pareto = ppareto(x_range, xmin, alpha, lower.tail = F))
plot_data
# # Plot with Legend for presentation
# ggplot(data = plot_data, aes(x=log(x_range))) +  scale_colour_manual("",
#                       breaks = c("Truncated Pareto"),
#                       values = c("black")) + theme_bw() + theme(legend.position="none", axis.title.x = element_blank(), axis.text.x = element_text(size=18), axis.text.y = element_text(size=20), axis.title.y = element_blank(), title = element_blank(), rect = element_rect(fill = "transparent"), panel.grid = element_blank(), panel.background = element_rect(fill = "transparent"), # bg of the panel
#     plot.background = element_rect(fill = "transparent", color = NA),
#     legend.background = element_rect(fill = "transparent"), # get rid of legend bg
#     legend.box.background = element_rect(fill = "transparent")) + geom_point(data = empirical_data, aes(x = log(x), y = log(y)), shape = 1, color="black")
# ggsave(filename="survival_function_example.eps", bg="transparent")
### PDF of survival function + tail
# pdf("survival_function_example.pdf")
ggplot(data = empirical_data) +
scale_colour_manual(name = 'x > 0', values = setNames(c('red','green'),c(T, F))) +
theme_bw() + theme(legend.position="none", axis.title.x = element_blank(), axis.text.x = element_text(size=18), axis.text.y = element_text(size=20), axis.title.y = element_blank(), title = element_blank(), rect = element_rect(fill = "transparent"), panel.grid = element_blank(), panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA),
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent")) + geom_point(data = empirical_data, aes(x = log(x), y = log(y)), shape = 1)
# dev.off()
# # Plot without legend or regular Pareto. For small figures in presentation
# pdf("S18_small.pdf")
# ggplot(data = plot_data, aes(x=log(x_range))) + geom_line(aes(y=log(trunc_pareto), color = "Truncated Pareto")) +  scale_colour_manual("",
#                       breaks = c("Truncated Pareto"),
#                       values = c("green3", "blue")) + theme_bw() + theme(legend.position="none", axis.title.x = element_text(size=80, color = "green3"), axis.text.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), title = element_blank()) + geom_point(data = empirical_data, aes(x = log(x), y = log(y)), shape = 1) + xlab("p = 0.354")  + ylab("Fraction of steps greater than x") +ggtitle("Empirical Survivor function (log-log-scale)")
# dev.off()
### Plot entire data
# Range of the y-axis
x_range <- linspace(min(steps), max(steps), n = 1000)
# Generate the empirical cdf
empirical <- c()
for (i in 1:length(steps)) {
empirical <- c(empirical, length(steps[steps > steps[i]]) / length(steps))
}
empirical_data <- tibble(x = steps, y = empirical)
# Generate the continuous functions
plot_data <- tibble(x_range = x_range, trunc_pareto = ptruncpareto(x_range, xmin, xmax, alpha_truncated, lower.tail = F), pareto = ppareto(x_range, xmin, alpha, lower.tail = F))
plot_data
# # Plot with Legend for presentation
# ggplot(data = plot_data, aes(x=log(x_range))) +  scale_colour_manual("",
#                       breaks = c("Truncated Pareto"),
#                       values = c("black")) + theme_bw() + theme(legend.position="none", axis.title.x = element_blank(), axis.text.x = element_text(size=18), axis.text.y = element_text(size=20), axis.title.y = element_blank(), title = element_blank(), rect = element_rect(fill = "transparent"), panel.grid = element_blank(), panel.background = element_rect(fill = "transparent"), # bg of the panel
#     plot.background = element_rect(fill = "transparent", color = NA),
#     legend.background = element_rect(fill = "transparent"), # get rid of legend bg
#     legend.box.background = element_rect(fill = "transparent")) + geom_point(data = empirical_data, aes(x = log(x), y = log(y)), shape = 1, color="black")
# ggsave(filename="survival_function_example.eps", bg="transparent")
### PDF of survival function + tail
# pdf("survival_function_example.pdf")
ggplot(data = empirical_data) +
scale_colour_manual(name = 'x > 0', values = setNames(c('red','green'),c(T, F))) +
theme_bw() + theme(legend.position="none", axis.title.x = element_blank(), axis.text.x = element_text(size=18), axis.text.y = element_text(size=20), axis.title.y = element_blank(), title = element_blank(), rect = element_rect(fill = "transparent"), panel.grid = element_blank(), panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA),
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent")) + geom_point(data = empirical_data, aes(x = log(x), y = log(y), colour=x>1800), shape = 1)
# dev.off()
# # Plot without legend or regular Pareto. For small figures in presentation
# pdf("S18_small.pdf")
# ggplot(data = plot_data, aes(x=log(x_range))) + geom_line(aes(y=log(trunc_pareto), color = "Truncated Pareto")) +  scale_colour_manual("",
#                       breaks = c("Truncated Pareto"),
#                       values = c("green3", "blue")) + theme_bw() + theme(legend.position="none", axis.title.x = element_text(size=80, color = "green3"), axis.text.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), title = element_blank()) + geom_point(data = empirical_data, aes(x = log(x), y = log(y)), shape = 1) + xlab("p = 0.354")  + ylab("Fraction of steps greater than x") +ggtitle("Empirical Survivor function (log-log-scale)")
# dev.off()
options(warn=-1)
library(pracma)
library(tidyverse)
library(readxl)
library(EnvStats)
library(EstimationTools)
library(maps)
library(goftest)
library(magrittr)
library(geosphere)
library(evd)
library(fable)
library(lubridate)
library(VGAM)
data <- read_excel("/Users/alex/Documents/Uni/LevyFlight/Seehund S11 S12 S13 S14 .xlsx", col_names = c('Id', "Date", "x1", "x2", "lat", "lon", "V_MASK"), sheet = "S12") %>%
filter(V_MASK == 0) %>% select(-c(Id, x1, x2))
data
steps <- c(0)
lon <- data$lon
i <- 1
while (i <= length(lon)) {
start <- lon[i]
if (lon[i+1] >= lon[i]){
j <- i
while (lon[j+1] >= lon[j]) {
j <- j + 1
end <- lon[j]
}
}
else{
j <- i
while (lon[j+1] < lon[j]){
j <- j + 1
end <- lon[j]
}
}
step <- end - start
i <- j
steps <- c(steps, step)
}
steps <- abs(steps)
steps <- steps[steps > 0]
print('Number of steps after correction for direction')
print(length(steps))
# Convert angles to lengths on earth surface
steps <- steps * 6371000.78 * (pi / 180)
ggplot(data = steps %>% as_tibble(), aes(x = steps)) + geom_histogram() + labs(title = 'Histogram of steps sizes in x direction')
steps <- sort(steps)
steps_truncated <- steps[steps > 665]
print("Number of steps in tail data set")
print(length(steps_truncated))
n = length(steps_truncated)
fit_pareto <- epareto(steps_truncated, method = "mle", plot.pos.con = 0.575)
fit_pareto
xmin <- fit_pareto$parameters[1]
alpha <- fit_pareto$parameters[2]
xmax <- max(steps_truncated)
alpha
steps_for_exp <- steps_truncated - min(steps_truncated)
lambda <- length(steps_for_exp) / sum(steps_for_exp, na.rm = T)
print(lambda)
options(warn=0)
xmax = max(steps_truncated)
LogLikelihood <- function(mu) return(length(steps_truncated) * log(mu / (xmin**(-mu)-xmax**(-mu))) - (mu+1)*sum(log(steps_truncated)))
mu_hat <- optimize(LogLikelihood, c(0,4), maximum = T)
alpha_truncated <- mu_hat$maximum
alpha_truncated
CVM_stat <- function(x, data) {
a <- x[1]
b <- x[2]
alpha_trunc <- x[3]
T_stat <- 1 / (12 * n) + sum((seq(1, 2 * n - 1, 2) / (2 * n) - ptruncpareto(data, a, b, alpha_trunc, lower.tail = T)) ** 2)
return(T_stat)
}
optims <- optim(c(min(steps_truncated), max(steps_truncated), 0.5), CVM_stat, data = steps_truncated)$par
a_cvm <- optims[1]
b_cvm <- optims[2]
alpha_trunc_cvm <- optims[3]
print(CVM_stat(optims, steps_truncated))
sample <- sort(rtruncpareto(n, a_cvm, b_cvm, alpha_trunc_cvm))
print(CVM_stat(optims, sample))
optims_sample <- optim(c(min(sample), max(sample), 0.5), CVM_stat, data = sample)$par
print(CVM_stat(optims_sample, sample))
# Range of the y-axis
x_range <- linspace(min(steps_truncated), max(steps_truncated), n = 1000)
# Generate the empirical cdf
empirical <- c()
for (i in 1:length(steps_truncated)) {
empirical <- c(empirical, length(steps_truncated[steps_truncated > steps_truncated[i]]) / length(steps_truncated))
}
empirical_data <- tibble(x = steps_truncated, y = empirical)
# Generate the continuous functions
plot_data <- tibble(x_range = x_range, trunc_pareto = ptruncpareto(x_range, xmin, xmax, alpha_truncated, lower.tail = F), pareto = ppareto(x_range, xmin, alpha, lower.tail = F))
plot_data
# Plot with Legend for presentation
# pdf("plot_1800_S18.pdf")
ggplot(data = plot_data, aes(x=log(x_range))) + geom_line(aes(y=log(trunc_pareto), color = "Truncated Pareto")) +  scale_colour_manual("",
breaks = c("Truncated Pareto"),
values = c("black")) + theme_bw() + theme(legend.position="none", axis.title.x = element_blank(), axis.text.x = element_text(size=18), axis.text.y = element_text(size=20), axis.title.y = element_blank(), title = element_blank(), rect = element_rect(fill = "transparent"), panel.grid = element_blank(), panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA),
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent")) + geom_point(data = empirical_data, aes(x = log(x), y = log(y)), shape = 1, color="black")
ggsave(filename="S12_small.eps", bg="transparent")
# Plot without legend or regular Pareto. For small figures in presentation
pdf("S12_small.pdf")
ggplot(data = plot_data, aes(x=log(x_range))) + geom_line(aes(y=log(trunc_pareto), color = "Truncated Pareto")) +  scale_colour_manual("",
breaks = c("Truncated Pareto"),
values = c("green3", "blue")) + theme_bw() + theme(legend.position="none", axis.title.x = element_text(size=80, color = "green3"), axis.text.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), title = element_blank()) + geom_point(data = empirical_data, aes(x = log(x), y = log(y)), shape = 1) + xlab("p = 0.245")  + ylab("Fraction of steps greater than x") +ggtitle("Empirical Survivor function (log-log-scale)")
dev.off()
# pdf("survival_function_example.pdf")
ggplot(data = empirical_data) +
scale_colour_manual(name = 'x > 0', values = setNames(c('red','green'),c(T, F))) +
theme_bw() + theme(legend.position="none", axis.title.x = element_blank(), axis.text.x = element_text(size=18), axis.text.y = element_text(size=20), axis.title.y = element_blank(), title = element_blank(), rect = element_rect(fill = "transparent"), panel.grid = element_blank(), panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA),
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent")) + geom_point(data = empirical_data, aes(x = log(x), y = log(y), colour=x>1800), shape = 1)
# dev.off()
data <- read_excel(path, col_names = c('Id', "Date", "x1", "x2", "lat", "lon", "V_MASK"), sheet = animal) %>%
filter(V_MASK == 0) %>% select(-c(Id, x1, x2))
###
path = "C:\Users\Alex\OneDrive - UT Cloud\Documents\Uni\LevyFlight\Seehund S11 S12 S13 S14 .xlsx"
###
path = "C:\\Users\\Alex\\OneDrive - UT Cloud\\Documents\\Uni\\LevyFlight\\Seehund S11 S12 S13 S14 .xlsx"
while (i <= length(lon)) {
start <- lon[i]
if (lon[i+1] >= lon[i]){
j <- i
while (lon[j+1] >= lon[j]) {
j <- j + 1
end <- lon[j]
}
}
else{
j <- i
while (lon[j+1] < lon[j]){
j <- j + 1
end <- lon[j]
}
}
step <- end - start
times <- c(times, date(data$Date[i]))
i <- j
steps <- c(steps, step)
}
options(warn=-1)
library(pracma)
library(tidyverse)
library(readxl)
library(EnvStats)
library(EstimationTools)
library(maps)
library(goftest)
library(magrittr)
library(geosphere)
library(evd)
library(fable)
library(lubridate)
library(VGAM)
library(fdrtool)
data <- read_excel("/Users/alex/Documents/Uni/LevyFlight/Seehund S11 S12 S13 S14 .xlsx", col_names = c('Id', "Date", "x1", "x2", "lat", "lon", "V_MASK"), sheet = "S11") %>%
filter(V_MASK == 0) %>% select(-c(Id, x1, x2))
data <- read_excel("C:\\Users\\Alex\\OneDrive - UT Cloud\\Documents\\Uni\\LevyFlight\\Seehund S11 S12 S13 S14 .xlsx", col_names = c('Id', "Date", "x1", "x2", "lat", "lon", "V_MASK"), sheet = "S11") %>%
filter(V_MASK == 0) %>% select(-c(Id, x1, x2))
data
steps <- c(0)
times <- c(0)
lon <- data$lon
positive <- 0
negative <- 0
i <- 1
while (i <= length(lon)) {
start <- lon[i]
if (lon[i+1] >= lon[i]){
j <- i
while (lon[j+1] >= lon[j]) {
j <- j + 1
end <- lon[j]
}
}
else{
j <- i
while (lon[j+1] < lon[j]){
j <- j + 1
end <- lon[j]
}
}
step <- end - start
times <- c(times, date(data$Date[i]))
i <- j
steps <- c(steps, step)
}
steps <- c(0)
times <- c(0)
lon <- data$lon
positive <- 0
negative <- 0
i <- 1
print(length(lon))
while (i <= length(lon)) {
print(i)
start <- lon[i]
if (lon[i+1] >= lon[i]){
j <- i
while (lon[j+1] >= lon[j]) {
j <- j + 1
end <- lon[j]
}
}
else{
j <- i
while (lon[j+1] < lon[j]){
j <- j + 1
end <- lon[j]
}
}
step <- end - start
times <- c(times, date(data$Date[i]))
i <- j
steps <- c(steps, step)
}
steps <- c(0)
times <- c(0)
lon <- data$lon
positive <- 0
negative <- 0
i <- 1
print(length(lon))
while (i < length(lon)) {
start <- lon[i]
if (lon[i+1] >= lon[i]){
j <- i
while (lon[j+1] >= lon[j]) {
j <- j + 1
end <- lon[j]
if (j == length(lon)) {
break
}
}
}
else{
j <- i
while (lon[j+1] < lon[j]){
j <- j + 1
end <- lon[j]
if (j == length(lon)) {
break
}
}
}
step <- end - start
times <- c(times, date(data$Date[i]))
i <- j
steps <- c(steps, step)
}
print(length(steps))
print(length(steps))
data <- read_excel(path, col_names = c('Id', "Date", "x1", "x2", "lat", "lon", "V_MASK"), sheet = animal) %>%
filter(V_MASK == 0) %>% select(-c(Id, x1, x2))
###
path = "C:\\Users\\Alex\\OneDrive - UT Cloud\\Documents\\Uni\\LevyFlight\\Seehund S11 S12 S13 S14 .xlsx"
animal = "S11"
###
source(get_steps)
data <- read_excel(path, col_names = c('Id', "Date", "x1", "x2", "lat", "lon", "V_MASK"), sheet = animal) %>%
filter(V_MASK == 0) %>% select(-c(Id, x1, x2))
steps <- c(0)
times <- c(0)
lon <- data$lon
positive <- 0
negative <- 0
i <- 1
while (i <= length(lon)) {
start <- lon[i]
if (lon[i+1] >= lon[i]){
j <- i
while (lon[j+1] >= lon[j]) {
j <- j + 1
end <- lon[j]
}
}
else{
j <- i
while (lon[j+1] < lon[j]){
j <- j + 1
end <- lon[j]
}
}
step <- end - start
times <- c(times, date(data$Date[i]))
i <- j
steps <- c(steps, step)
}
###
path = "C:\\Users\\Alex\\OneDrive - UT Cloud\\Documents\\Uni\\LevyFlight\\Seehund S11 S12 S13 S14 .xlsx"
animal = "S11"
###
source(get_steps)
data <- read_excel(path, col_names = c('Id', "Date", "x1", "x2", "lat", "lon", "V_MASK"), sheet = animal) %>%
filter(V_MASK == 0) %>% select(-c(Id, x1, x2))
steps <- c(0)
times <- c(0)
lon <- data$lon
positive <- 0
negative <- 0
i <- 1
print(length(lon))
while (i < length(lon)) {
start <- lon[i]
if (lon[i+1] >= lon[i]){
j <- i
while (lon[j+1] >= lon[j]) {
j <- j + 1
end <- lon[j]
if (j == length(lon)) {
break
}
}
}
else{
j <- i
while (lon[j+1] < lon[j]){
j <- j + 1
end <- lon[j]
if (j == length(lon)) {
break
}
}
}
step <- end - start
times <- c(times, date(data$Date[i]))
i <- j
steps <- c(steps, step)
}
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/get_steps.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/truncate_steps.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/truncate_steps.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/truncate_steps.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/truncate_steps.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/truncate_steps.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/truncate_steps.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/truncate_steps.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
steps <- sort(steps)
steps_truncated <- steps[steps > 665]
print("Number of steps in tail data set")
print(length(steps_truncated))
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/fit_distributions.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/plot.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/plot.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/bootstrapped_cvm.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R')
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R')
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R')
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R')
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R')
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/plot.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/plot.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
### Settings ###
# Set path leading to excel file containing the GPS data
path = "C:\\Users\\Alex\\OneDrive - UT Cloud\\Documents\\Uni\\LevyFlight\\gps_data.xlsx"
# Choose animal by setting the string to the name of the corresponding sheet in the excel file
animal = "S21"
### Code ###
print(paste0("Animal: ", animal))
# Set working directory to current folder, import functions
setwd(dirname(rstudioapi::getActiveDocumentContext()$path));
source("get_steps.R");
source("fit_distributions.R")
source("plot.R")
source("bootstrapped_cvm.R")
# Load Data
data <- read_excel(path, col_names = c('Id', "Date", "x1", "x2", "lat", "lon", "V_MASK"), sheet = animal) %>%
filter(V_MASK == 0) %>% select(-c(Id, x1, x2))
# Generate step lengths
steps = get_steps(data=data)
print(paste0("Number of steps in the data set: ", length(steps)))
steps_truncated = truncate_steps(steps, animal)
print(paste0("Number of steps in the tail data: ", length(steps_truncated)))
# Fit distributions
alpha = fit_pareto(steps_truncated)[2]
xmin = fit_truncated_pareto(steps_truncated)[1]
xmax = fit_truncated_pareto(steps_truncated)[2]
alpha_truncated = fit_truncated_pareto(steps_truncated)[3]
print(paste0("Estimated exponent for the truncated Pareto distribution: ", round(alpha_truncated, 2)))
# Plot data
plot(steps_truncated, xmin, xmax, alpha, alpha_truncated)
# Compute the bootstrapped Cramer-von Mises test
print("Bootstrapping the p-value for the CVM test...")
p = bootstrapped_cvm(steps_truncated)
print(paste0("Bootstrapped p-value: ", p))
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/plot_distribution.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/plot_distribution.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R', echo=TRUE)
source('~/Uni/LevyFlight/1D-Analysis/Levy_Flight_Analysis/levy_flight_analysis.R')
